[{"/Users/marco_cmp/numberSense/number-sense/src/index.js":"1","/Users/marco_cmp/numberSense/number-sense/src/App.js":"2","/Users/marco_cmp/numberSense/number-sense/src/reportWebVitals.js":"3","/Users/marco_cmp/numberSense/number-sense/src/buttons.js":"4","/Users/marco_cmp/numberSense/number-sense/src/result.js":"5","/Users/marco_cmp/numberSense/number-sense/src/question.js":"6","/Users/marco_cmp/numberSense/number-sense/src/exams.js":"7","/Users/marco_cmp/numberSense/number-sense/src/sampleExam.js":"8","/Users/marco_cmp/numberSense/number-sense/src/1999.js":"9","/Users/marco_cmp/numberSense/number-sense/src/timer.js":"10","/Users/marco_cmp/numberSense/number-sense/src/2014.js":"11","/Users/marco_cmp/numberSense/number-sense/src/2013.js":"12","/Users/marco_cmp/numberSense/number-sense/src/Exam.js":"13","/Users/marco_cmp/numberSense/number-sense/src/2018.js":"14","/Users/marco_cmp/numberSense/number-sense/src/2000.js":"15"},{"size":500,"mtime":1611443926230,"results":"16","hashOfConfig":"17"},{"size":9070,"mtime":1612203606109,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1611443926230,"results":"19","hashOfConfig":"17"},{"size":1726,"mtime":1611600255601,"results":"20","hashOfConfig":"17"},{"size":256,"mtime":1611445269667,"results":"21","hashOfConfig":"17"},{"size":118,"mtime":1611588107558,"results":"22","hashOfConfig":"17"},{"size":111,"mtime":1611592405462,"results":"23","hashOfConfig":"17"},{"size":897,"mtime":1611596951701,"results":"24","hashOfConfig":"17"},{"size":5932,"mtime":1612200199314,"results":"25","hashOfConfig":"17"},{"size":1664,"mtime":1611963463129,"results":"26","hashOfConfig":"17"},{"size":53,"mtime":1611859458854,"results":"27","hashOfConfig":"17"},{"size":4368,"mtime":1611976210731,"results":"28","hashOfConfig":"17"},{"size":830,"mtime":1611940705042,"results":"29","hashOfConfig":"17"},{"size":6336,"mtime":1612200486448,"results":"30","hashOfConfig":"17"},{"size":1071,"mtime":1612198525384,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1278hjd",{"filePath":"35","messages":"36","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"34"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"64"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/marco_cmp/numberSense/number-sense/src/index.js",[],["69","70"],"/Users/marco_cmp/numberSense/number-sense/src/App.js",["71","72","73","74","75","76","77","78","79","80"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport {KeyPadComponent} from './buttons';\nimport {ResultComponent} from './result';\nimport { render } from '@testing-library/react';\nimport 'katex/dist/katex.min.css';\nimport { InlineMath, BlockMath } from 'react-katex';\nimport {sac99, invA99, invB99,disA99,disB99,reg99} from './1999';\nimport {sac00} from './2000';\nimport {invA13, invB13,dis13, reg13, state13} from './2013';\nimport {preA18, invA18, invB18,dis18, reg18, state18} from './2018';\nimport {Countdown} from './timer';\nimport {Exam} from './Exam';\n\nconst questions = [\n  sac99,invA99,invB99,disA99,disB99,reg99,\n  sac00,\n  invA13, invB13, dis13,reg13, state13,\n  preA18, invA18, invB18,dis18, reg18, state18\n];\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // result: \"\",\n      question: \"\",\n      answer:\"\",\n      correct:0,\n      status: false,\n      current:0,\n      input: '',\n      score: 0,\n      restart: null,\n      rand: 0,\n      timevalue: 10,\n      exam: [],\n      key: [],\n      show: false,\n      stopinput:false,\n      wrong:[],\n      range: \"All\",\n      response: []\n    }\n    this.onHandleChange = this.onHandleChange.bind(this);\n    this.onSubmit =this.onSubmit.bind(this);\n    this.changetime = this.changetime.bind(this);\n    this.stopInput = this.stopInput.bind(this);\n  }\n  score = () => {\n    return this.state.score;\n  }\n  question(){\n    return this.state.question;\n  }\n  answer(){\n    return this.state.answer;\n  }\n  stopInput = e =>{\n    if (e === \"stop\"){\n    this.setState({stopinput: true});\n    }\n  }\n\n  onClick = button => {\n    if (button ===\"start\"){\n      let rand = Math.floor(Math.random()* questions.length);\n      this.setState({rand: rand});\n      let currentquestion = this.state.current;\n      this.setState({current: currentquestion + 1});\n      this.setState({\n        question: Object.keys(questions[rand])[this.state.current] \n      });\n      this.setState({answer: Object.values(questions[rand])[this.state.current]});\n      this.status();\n    }\n    else if (button ===\"showexam\"){\n      this.setState({show: true})\n    }\n    else if (button ===\"reset\"){\n      window.location.reload();\n    }\n\n    // else{\n      // this.setState({result: this.state.result + button})\n   // }\n  }\n\n  \n  random = () =>{\n    let rand = Math.floor(Math.random()* questions.length);\n    this.setState({rand: rand});\n    let currentquestion = this.state.current;\n    this.latexdisplay(rand);\n    this.setState({current: currentquestion + 1});\n    if (currentquestion > 19){\n      this.setState({range: 'stop'});\n      this.setState({stopinput: true});\n      this.setState({show: true});\n    }\n\n  }\n  status = () =>{\n    if (this.state.status === true){\n      this.setState({status: false})\n    } else{\n      this.setState({status:true})\n    }\n  }\n\n  latexdisplay = rand =>{\n    this.setState({\n      question: Object.keys(questions[rand])[this.state.current] \n    });\n    this.setState({answer: Object.values(questions[rand])[this.state.current]});\n    let currq = this.state.question;\n    let curra = this.state.answer;\n    this.setState(prevState => ({\n      exam: [...prevState.exam, currq ]\n    }));\n    this.setState(prevState => ({\n      key: [...prevState.key, curra ]\n    }));\n    \n\n  }\n\n\n  /* reset = () =>{\n    this.setState({result:\"\"})\n  }\n  */\n\n  onSubmit = (e) =>{\n    e.preventDefault();\n    let currentcorrect = this.state.correct;\n    let currentscore = this.state.score;\n     const useranswer = e.target.querySelector(\n      'input[type=\"text\"]').value;\n    let addtoanswer;\n    this.setState(prevState => ({\n      response: [...prevState.response, useranswer ]\n    }));\n    if (typeof(this.state.answer) =='number'){\n        let top = 1.05*this.state.answer;\n        let bottom =0.95 * this.state.answer;\n        addtoanswer = (useranswer < top && useranswer > bottom )\n      }\n    else if (typeof(this.state.answer) =='object'){\n      addtoanswer =(useranswer== this.state.answer[0] || useranswer == this.state.answer[1] || useranswer == this.state.answer[2])\n    }else{\n          addtoanswer = useranswer == this.state.answer;\n      }\n    if (!this.state.stopinput){\n      if (addtoanswer){\n      this.setState({correct: currentcorrect + 1});\n      this.setState({score: currentscore + 5});\n      this.setState({input: ''});\n      // this.reset();\n      this.random();\n    }else{\n    this.setState({input: ''});\n    this.setState({score: currentscore - 4});\n    let incorrect = this.state.current;\n    this.setState(prevState =>({\n      wrong: [...prevState.wrong, incorrect]\n    }));\n    // this.reset();\n    this.random();\n    }\n    }else{\n      if (addtoanswer){\n        this.setState({correct: currentcorrect + 1});\n        this.setState({input: ''});\n        // this.reset();\n        this.random();\n      }else{\n      this.setState({input: ''});\n      // this.reset();\n      this.random();\n      }\n    }\n    \n  }\n\n  onHandleChange(e){\n    this.setState({input: e.target.value});\n  } \n\n  //This will be for changing the range but it was not working very well during testing.\n  changerange(e){\n    this.setState({range: e.target.value});\n  }\n\n\n\n  changetime(e){\n    this.setState({timevalue: e.target.value});\n  }\n\n  render(){\n\n    let start = (\n      <div>\n      <button id =\"start\" name = \"start\" onClick = {e => this.onClick(e.target.name)}>Start!\n      </button>\n      <br />\n      <br />\n      <label id = \"timechoice1\" for=\"Time\">Change the time:</label>\n      <select id = \"timechoice\" onChange ={this.changetime} value = {this.state.timevalue}>\n        <option value =\"10\">10 minutes</option>\n        <option value = \"5\">5 minutes</option>\n        <option value = \"2\">2 minutes</option>\n        <option value = \"1\">1 minute</option>\n      </select>\n      </div>\n\n    );\n    let latex = this.state.question;\n    let questionDisplay = (\n      <div>\n      <h2>\n        <BlockMath>{String.raw`(${this.state.current %10 ===0 ? `${this.state.current}^*` : this.state.current })`+'\\\\textrm{                      }  '+  String.raw`${latex}`}</BlockMath>\n       \n      </h2>\n      </div>\n    );\n    \n    let userInput = (\n    <form id = \"userinput\" onSubmit = {this.onSubmit}>\n    <input \n      type =\"text\"\n      pattern = \"(?=.\\[0-9] )\"\n      onChange ={this.onHandleChange}\n      value= {this.state.input}\n      placeholder = \"\" /><br />\n    <input id = \"submit\" type =\"submit\" autofocus/>\n  </form>);\n\n    let examkey = {};\n    let examq = this.state.exam;\n    let examk = this.state.key;\n    let exama = this.state.response;\n    \n    [...examq].forEach((question, i ) =>{\n      examkey[question] = [examk[i],exama[i]]\n    });\n    \n\n    let examdisplay =(\n      <table class=\"resultsafter\">\n        <tr>\n          <th>Questions </th>\n          <th>Key</th>\n          <th>Answers</th>\n        </tr>\n      {Object.keys(examkey).map((question, index) =>(\n        <tr id ={this.state.wrong.includes(index+1) ? 'wrong' : 'right'}>\n          <td>\n            <BlockMath>{String.raw` ${Object.keys(examkey)[index]}`}</BlockMath>\n          </td>\n          <td>\n          <BlockMath>{String.raw` ${Object.values(examkey)[index][0]}`}</BlockMath>\n          </td>\n          <td>\n          <BlockMath>{String.raw` ${Object.values(examkey)[index][1]}`}</BlockMath>\n          </td>\n        </tr>\n      ))}\n      </table>\n    )\n    \n    let instructions = (\n      <div id =\"instructions\"> \n        <ul>\n          <li>Select a time above and begin answering the questions.</li>\n          <li>Make sure you use \"/\" for fractions and leave a space for mixed numbers.</li>\n        </ul>\n        <h3><BlockMath>{String.raw`3 \\frac{1}{2} \\textrm{ should be written as: 3 1/2}`}</BlockMath> </h3><br/>\n        <h2>Rules:</h2>\n        <ul>\n          <li>+5 points per question correct</li>\n          <li>-4 points per question incorrect or skipped</li>\n          <li>Every question marked with \"*\" can be rounded within 5 percent of the answer</li>\n        </ul>\n\n      </div>\n    )\n    let resetbutton= (<button id= \"resethome\" name = \"reset\" onClick={e => this.onClick(e.target.name)}>Reset\n    </button>);\n    \n  return (\n    <div className=\"calculator-body\" >\n      <h1 id =\"title\">Number Sense Practice</h1>\n      {this.state.status ? <Countdown onClick={this.onClick} score={this.score()} minutes ={this.state.timevalue} stopInput={this.stopInput}/>: ''}      \n      <div>{this.state.status && !this.state.show && !this.state.stopinput ? questionDisplay : ''}{this.state.status ? '' : start}</div>\n        {this.state.status && !this.state.show && !this.state.stopinput ? userInput : ''}<br />\n     \n      <div>\n        {this.state.restart ? start : ''}\n        {this.state.status ? '': instructions}\n      </div>\n      <div>{this.state.status ? resetbutton: ''}</div>\n      <div>{this.state.show ? examdisplay : ''} </div>\n      \n    \n    </div>\n  );\n  }\n}\n// Add these bellow the questions correct tag for the keypad\n// <ResultComponent result={this.state.result}/>\n// <KeyPadComponent onClick={this.onClick}/>\n\nexport default App;\n","/Users/marco_cmp/numberSense/number-sense/src/reportWebVitals.js",[],"/Users/marco_cmp/numberSense/number-sense/src/buttons.js",[],"/Users/marco_cmp/numberSense/number-sense/src/result.js",[],"/Users/marco_cmp/numberSense/number-sense/src/question.js",[],"/Users/marco_cmp/numberSense/number-sense/src/exams.js",[],"/Users/marco_cmp/numberSense/number-sense/src/sampleExam.js",["81","82","83","84"],"export const questions ={\n  '2 \\\\times 4 ' :'8',\n  ' 4 \\\\times 5 ': '20',\n  ' 6 \\\\frac{1}{2}': '6 1/2',\n  ' 12 \\\\times 17 =': '204',\n  ' .2 + 40 \\\\% + \\\\frac{3}{10}=\\\\, (decimal) ': '.9',\n  ' 256 \\\\div 1.6 = ': '160',\n  ' 3 \\\\times 6 - 4 \\\\times 7 =': '-10',\n  ' 15 \\\\times 420 = ': '6300',\n  ' \\\\textrm{Which is larger}, \\\\frac{11}{13} \\\\textrm{ or } \\\\frac{10}{11} ':'10/11',\n  ' .125 = \\\\textrm{(fraction)}':'1/8',\n  ' 3 + 5 \\\\div 4 \\\\times 2 - 5 =':'.5',\n  ' 19^2 = ':'361'\n}\nexport const sac19 = {\n  '(1) 12 \\\\times 17 =______': 0,\n  '(2) .2 + 40 \\\\% + \\\\frac{3}{10}= ______ (decimal) ': 0,\n  '(3) 256 \\\\div 1.6 = ______': 0,\n  '(4) 3 \\\\times 6 - 4 \\\\times 7 = ______': 0,\n  '(5) 15 \\\\times 420 = ______': 0,\n  '(6) Which \\ is \\ larger, \\\\frac{11}{13 \\ or \\ \\\\frac{10}{11}':0,\n  '(7) .125 = __________(fraction)':0,\n  '(8) 3 + 5 \\\\div 4 \\times 2 - 5 =______':0,\n  '(9) 19^2 = _________':0\n}\n\n",["85","86"],"/Users/marco_cmp/numberSense/number-sense/src/1999.js",[],"/Users/marco_cmp/numberSense/number-sense/src/timer.js",["87"],"import React from 'react';\n\nexport class Countdown extends React.Component{\n    state = {\n        minutes: this.props.minutes,\n        seconds: 0,\n    }\n\n    componentDidMount() {\n        this.myInterval = setInterval(() => {\n            const { seconds, minutes } = this.state\n\n            if (seconds > 0) {\n                this.setState(({ seconds }) => ({\n                    seconds: seconds - 1\n                }))\n            }\n            if (seconds === 0) {\n                if (minutes === 0) {\n                    clearInterval(this.myInterval);\n                    {this.props.stopInput(\"stop\")};\n                } else {\n                    this.setState(({ minutes }) => ({\n                        minutes: minutes - 1,\n                        seconds: 59\n                    }))\n                }\n            } \n        }, 1000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.myInterval)\n    }\n    render(){\n        // const {minutes} = this.props;\n        const {minutes, seconds } = this.state;\n        return (\n            <div>\n                { minutes === 0 && seconds === 0\n                    ? (<div name=\"stop\" >\n                        <h2>Times Up! Your score was {this.props.score}</h2>\n                        <div>\n                        <button id=\"showexam\" name=\"showexam\" onClick={e => this.props.onClick(e.target.name)}>Show Exam:</button>\n                        </div>\n                        <h2>Click reset to try again!</h2>\n                      </div>)\n                    : <h2>Time Remaining: {minutes}:{seconds < 10 ? `0${seconds}` : seconds}</h2>\n                }\n            </div>\n        )\n    }\n}","/Users/marco_cmp/numberSense/number-sense/src/2014.js",[],"/Users/marco_cmp/numberSense/number-sense/src/2013.js",[],"/Users/marco_cmp/numberSense/number-sense/src/Exam.js",["88","89"],"import { render } from '@testing-library/react';\nimport React from 'react';\nimport 'katex/dist/katex.min.css';\nimport { InlineMath, BlockMath } from 'react-katex';\n\nexport class Exam extends React.Component {\n\n    render(){\n\n\n        return(\n            <div>\n            <table class = \"questionsend\">\n               {this.props.exam.map((question, index) =>(\n        <tr >\n          <th>\n            <BlockMath>{String.raw` ${this.props.exam[index]}`}</BlockMath>\n          </th>\n          \n        </tr>\n      ))}\n            </table>\n            <table class = \"answers\">\n            {this.props.key.map((question, index) =>(\n     <tr >\n       <th>\n         <BlockMath>{String.raw` ${this.props.key[index]}`}</BlockMath>\n       </th>\n       \n     </tr>\n   ))}\n         </table>\n         </div>\n\n            \n        )\n    }\n}\n",["90","91"],"/Users/marco_cmp/numberSense/number-sense/src/2018.js",[],"/Users/marco_cmp/numberSense/number-sense/src/2000.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":2,"column":8,"nodeType":"98","messageId":"99","endLine":2,"endColumn":16},{"ruleId":"96","severity":1,"message":"100","line":4,"column":9,"nodeType":"98","messageId":"99","endLine":4,"endColumn":24},{"ruleId":"96","severity":1,"message":"101","line":5,"column":9,"nodeType":"98","messageId":"99","endLine":5,"endColumn":24},{"ruleId":"96","severity":1,"message":"102","line":6,"column":10,"nodeType":"98","messageId":"99","endLine":6,"endColumn":16},{"ruleId":"96","severity":1,"message":"103","line":8,"column":10,"nodeType":"98","messageId":"99","endLine":8,"endColumn":20},{"ruleId":"96","severity":1,"message":"104","line":14,"column":9,"nodeType":"98","messageId":"99","endLine":14,"endColumn":13},{"ruleId":"105","severity":1,"message":"106","line":151,"column":31,"nodeType":"107","messageId":"108","endLine":151,"endColumn":33},{"ruleId":"105","severity":1,"message":"106","line":151,"column":69,"nodeType":"107","messageId":"108","endLine":151,"endColumn":71},{"ruleId":"105","severity":1,"message":"106","line":151,"column":107,"nodeType":"107","messageId":"108","endLine":151,"endColumn":109},{"ruleId":"105","severity":1,"message":"106","line":153,"column":36,"nodeType":"107","messageId":"108","endLine":153,"endColumn":38},{"ruleId":"109","severity":1,"message":"110","line":21,"column":14,"nodeType":"111","messageId":"112","endLine":21,"endColumn":15,"suggestions":"113"},{"ruleId":"109","severity":1,"message":"110","line":21,"column":19,"nodeType":"111","messageId":"112","endLine":21,"endColumn":20,"suggestions":"114"},{"ruleId":"109","severity":1,"message":"110","line":21,"column":43,"nodeType":"111","messageId":"112","endLine":21,"endColumn":44,"suggestions":"115"},{"ruleId":"109","severity":1,"message":"110","line":21,"column":48,"nodeType":"111","messageId":"112","endLine":21,"endColumn":49,"suggestions":"116"},{"ruleId":"92","replacedBy":"117"},{"ruleId":"94","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":21,"column":21,"nodeType":"121","messageId":"122","endLine":21,"endColumn":51},{"ruleId":"96","severity":1,"message":"102","line":1,"column":10,"nodeType":"98","messageId":"99","endLine":1,"endColumn":16},{"ruleId":"96","severity":1,"message":"103","line":4,"column":10,"nodeType":"98","messageId":"99","endLine":4,"endColumn":20},{"ruleId":"92","replacedBy":"123"},{"ruleId":"94","replacedBy":"124"},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'ReactDOM' is defined but never used.","Identifier","unusedVar","'KeyPadComponent' is defined but never used.","'ResultComponent' is defined but never used.","'render' is defined but never used.","'InlineMath' is defined but never used.","'Exam' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-useless-escape","Unnecessary escape character: \\ .","Literal","unnecessaryEscape",["127","128"],["129","130"],["131","132"],["133","134"],["125"],["126"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock",["125"],["126"],"no-global-assign","no-unsafe-negation",{"messageId":"135","fix":"136","desc":"137"},{"messageId":"138","fix":"139","desc":"140"},{"messageId":"135","fix":"141","desc":"137"},{"messageId":"138","fix":"142","desc":"140"},{"messageId":"135","fix":"143","desc":"137"},{"messageId":"138","fix":"144","desc":"140"},{"messageId":"135","fix":"145","desc":"137"},{"messageId":"138","fix":"146","desc":"140"},"removeEscape",{"range":"147","text":"148"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"149","text":"150"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"151","text":"148"},{"range":"152","text":"150"},{"range":"153","text":"148"},{"range":"154","text":"150"},{"range":"155","text":"148"},{"range":"156","text":"150"},[727,728],"",[727,727],"\\",[732,733],[732,732],[756,757],[756,756],[761,762],[761,761]]